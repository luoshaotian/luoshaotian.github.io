<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客美化日记1</title>
      <link href="/posts/32866dd8/"/>
      <url>/posts/32866dd8/</url>
      
        <content type="html"><![CDATA[<p>最近这几天对博客的主题进行了美化，踩了一些坑，写在这里作为记录。</p><h1 id="评论系统的创建"><a href="#评论系统的创建" class="headerlink" title="评论系统的创建"></a>评论系统的创建</h1><pre><code>在创建评论系统的过程中，刚开始建立评论系统时选用了[livere](https://livere.com/)、gitalk与Twikoo。刚开始 注册时，由于不太懂如何看使用说明，花了很长时间。发现美化butterfly诸如此类的博客主题时，最重要的还是先要仔细观看官方所给的文档。将文档的内容弄清楚，其实大部分的主题美化就已经完成了。剩下的就是一些需要更加深层次知识的操作了。- 在使用[来必力](https://livere.com/)时，只需要在来必力网站根据提示设置好后，将uid填入butterfly的_config.yml文档的相应位置即可。而butterfly的文档中其实给出了uid所在位置，但是由于自己没有仔细观看导致前期浪费了很多时间。- 在填好uid之后，无论是来必力还是Twikoo评论系统，貌似都需要一定的加载时间。当第一次使用```hexo clean；hexo g；hexo d；hexo s```命令进行效果观察时，发现评论系统根本没有出现，大概等个几分钟后重复操作，发现评论系统又出现了，这导致开始时由于不熟悉这个奇怪的“机制”导致自己浪费了很多时间。- 最终本人选择了Twikoo评论系统，根据官方文档的提示，选择了暂时不需要花钱的部署方式：[vercel部署](https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2),这种部署方式感觉有点奇怪，好在文档中给出了B站的视频教程，遂跟着视频进行了部署。- Twikoo的vercel部署的方式的缺点也很明显：国内用户加载时非常的慢，Twikoo中也给出了手动部署的选择以及教程，但由于没有money，所以还是先凑合着用vercel部署吧。</code></pre><h1 id="CSS-与-JS"><a href="#CSS-与-JS" class="headerlink" title="CSS 与 JS"></a>CSS 与 JS</h1><p>这玩意儿我根本没见过，刚开始跟着<a href="https://www.xmwpro.com/post/8c8593e1.html">cyan</a>的教程照猫画虎的用了以下某些有关系的代码，但是本人完全看不懂好吧。本人也没有代码经验，做博客全凭兴趣。在进行评论区美化的过程中，我发现了<a href="https://www.cxl2020mc.top/post/Hexo-Butterfly-Twikoo%E8%AF%84%E8%AE%BA%E5%8C%BA%E7%BE%8E%E5%8C%96/#CSS%E4%BB%A3%E7%A0%81">陈鑫磊</a>的教程，只见他在代码区内直接写了一句，“魔改玩家都清楚咋添加外挂css的”。可是我完全不懂什么叫做外挂CSS。于是又去csdn找答案。<a href="https://blog.csdn.net/howareyou2104/article/details/106393184">在这篇文章</a>中我找到了答案。只需要将css脚本写在主题的<code>source/css/</code> 文件夹下，再在主题的配置文件下找到 head、bottom字眼，在head处挂载css代码，在bottom处挂载js代码即可。</p><p>形式如下：<br>head:</p><h2 id="外挂插件的css"><a href="#外挂插件的css" class="headerlink" title="外挂插件的css"></a>外挂插件的css</h2><ul><li><link rel="stylesheet" href="/css/VolantisTags.css">  bottom:</li></ul><h2 id="外挂插件的js"><a href="#外挂插件的js" class="headerlink" title="外挂插件的js"></a>外挂插件的js</h2><ul><li><script src="/js/VolantisTags.js"></script></li></ul><p>   如果是外部引用什么别的某个库，那还是看别的博主的教程慢慢一步一步来吧。本人暂时还没有理解其中的原因，或许有时间学习以下相关语言知识之后，对这些操作会有更加深刻的理解。</p><h1 id="离开和回到博客网页时，浏览器上方标题的变换"><a href="#离开和回到博客网页时，浏览器上方标题的变换" class="headerlink" title="离开和回到博客网页时，浏览器上方标题的变换"></a>离开和回到博客网页时，浏览器上方标题的变换</h1><pre><code>在学习的过程中，偶然发现别的博主的网页在离开时标题会发生改变，于是去网上搜索方法。在[这篇文章中](https://blog.csdn.net/u010491492/article/details/117987105)了解到了原因。说是使用了什么HTML5的Page visibility API。 我不懂什么是API，但是我知道这个东西应该是要“外挂js”，于是把它的代码复制改好后，放入```source/js/```文件夹中。将它写入主题配置文件的“bottom”下面，运行后发现——猜对了！就是这样。而在此后在学习引入icon来美化图标时，在[flaticon](https://www.flaticon.com/)中也发现了一个什么API的东西。因为不懂所以没办法使用这个网站的图标，只好转用[阿里巴巴矢量图库](https://www.iconfont.cn/)，目前还在探索当中。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客的创建过程</title>
      <link href="/posts/3385e746/"/>
      <url>/posts/3385e746/</url>
      
        <content type="html"><![CDATA[<p>创建博客首先需要一个GitHub的账号以及一台电脑。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>首先先准备好一个GitHub的账号。</li><li>搜索Git官网下载</li><li>在某个文件夹下打开cmd，输入<code>ssh</code>查看本机是否安装了SSH</li><li><code>ssh-keygen -t rsa</code> 命令，然后敲四次回车键，之后就就会生成两个文件。</li><li>接下来把公钥 id_rsa.pub 的内容添加到 GitHub</li><li>验证是否成功，我们可以通过在 Git Bash 中输入 <code>ssh -T git@github.com</code> 进行检验<span id="more"></span></li></ul><h2 id="提交方法"><a href="#提交方法" class="headerlink" title="提交方法"></a>提交方法</h2><h3 id="第一种：本地没有-git-仓库"><a href="#第一种：本地没有-git-仓库" class="headerlink" title="第一种：本地没有 git 仓库"></a>第一种：本地没有 git 仓库</h3><ul><li>直接将远程仓库 clone 到本地；</li><li>将文件添加并 commit 到本地仓库；</li><li>将本地仓库的内容push到远程仓库。</li></ul><ul><li>输入 <code>git clone https://github.com/luoshaotian/xxx.git</code>，将远程仓库 clone 到本地</li><li>从此目录进入 Git Bash，输入 <code>git status</code> 命令查看仓库状态：</li><li>完成后输入 <code>git log</code> 命令查看仓库提交日志</li><li>现在输入 <code>git push origin main</code> 命令，将本地仓库提交到远程仓库，origin是远程主机的名字</li></ul><h3 id="第二种：本地有-Git-仓库，并且我们已经进行了多次-commit-操作"><a href="#第二种：本地有-Git-仓库，并且我们已经进行了多次-commit-操作" class="headerlink" title="第二种：本地有 Git 仓库，并且我们已经进行了多次 commit 操作"></a>第二种：本地有 Git 仓库，并且我们已经进行了多次 commit 操作</h3><ul><li>建立一个本地仓库进入，init 初始化；</li><li>关联远程仓库；</li><li>同步远程仓库和本地仓库；</li><li>将文件添加提交到本地仓库；</li><li>将本地仓库的内容 push 到远程仓库。</li></ul><ul><li>首先，我们建立一个本地仓库 demo，使用 <code>git init</code> 命令初始化这个仓库</li><li>输入 <code>git remote add origin https://github.com/xxxxx</code> 命令，关联远程仓库，接着输入 <code>git pull origin main/master</code> 命令</li><li>回到本地仓库，发现我们已经把远程仓库的内容同步到了本地仓库</li><li>先输入 <code>git add</code> 和 <code>git commit</code> 命令，将要提交的文件添加并提交到 demo 仓库；然后再输入 <code>git push origin master</code> 命令，将本地仓库修改（或者添加）的内容提交到远程仓库。</li></ul><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>随便找个地方买就行</p><h2 id="安装nodejs-和-hexo"><a href="#安装nodejs-和-hexo" class="headerlink" title="安装nodejs 和 hexo"></a>安装nodejs 和 hexo</h2><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul><li>nodejs找到官网下载即可</li><li>在 nodejs 文件夹中新建两个空文件夹 node_cache、node_global</li><li>打开cmd，输入如下两个命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure></li><li>设置环境变量：win10系统 –&gt; 打开控制面板 –&gt; 系统 –&gt;高级系统设置 –&gt; 环境变量 ，然后在系统变量中新建一个变量名为“NODE_PATH”，值为“D:\nodejs\node_global\node_modules”</li><li>然后编辑用户变量里的Path，将相应npm的路径改为：D:\nodejs\node_global</li></ul><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><ul><li>建立一个GitHub仓库，名字为   luoshaotian.github.io   (luoshaotian 为自己的名字)</li><li>接下来就是安装Hexo，首先在D盘建立一个文件夹 Blog，点开 Blog 文件夹，鼠标右键打开 Git Bush Here，输入npm命令安装Hexo：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>安装完成后，输入 hexo init 命令初始化博客,然后输入 hexo g 静态部署：,这时网页已经部署完成，输入 hexo s 命令可以查看.</li><li>现在回到我们的 Blog 文件夹，用笔记本打开 _config.yml 文件,下滑到文件底部，填上如下内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/luoshaotian/luoshaotian.github.io.git  #你的仓库地址</span><br><span class="line">  branch: main </span><br></pre></td></tr></table></figure></li><li>然后回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令：</li></ul><p><code>npm install hexo-deployer-git --save </code></p><ul><li>然后分别输入以下三条命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure></li><li>完成以后，打开浏览器，输入 <a href="https://xxx.github.io/">https://xxx.github.io</a> 就可以打开你的网页了</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建这个博客的原因</title>
      <link href="/posts/f3f307e6/"/>
      <url>/posts/f3f307e6/</url>
      
        <content type="html"><![CDATA[<p>首先，创建这个博客只是为了好玩，毕竟也算是一门技术吧。能够通过自己写写代码创造处一个网上的博客还是挺不错的。</p><span id="more"></span><p>也不知道要更新什么，就把以后自己在工作中、生活中遇到的坑写在这里供自己思考反思吧。<br><b>hello world!<b><br><a href="https://www.youtube.com/">测试链接</a></p><div id="gitalk-container"></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
